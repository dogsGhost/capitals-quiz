// Generated by CoffeeScript 1.6.1

/*
* @fileOverview This file makes our quiz work.
* @author David Wilhelm
*/


(function() {
  var cQ;

  cQ = {
    init: function() {
      this.cacheVariables();
      return this.bindQuizList();
    },
    cacheVariables: function() {
      this.quizFormTemplate = Handlebars.compile($('#quiz-form-template').html());
      this.resultsTemplate = Handlebars.compile($('#results-template').html());
      this.$quizForm = $('#quiz-form');
      this.answerKey = [];
      this.userAnswers = [];
      this.numberAnswered = 0;
      this.totalQuestions = 0;
      this.invalidForm = false;
      return this.qSetLength = 3;
    },
    bindQuizList: function() {
      return $('#quizList').on('click', 'a', this.determineQuiz);
    },
    determineQuiz: function(e) {
      e.preventDefault();
      if (this.id === 'usa') {
        cQ.createAnswerKey();
        return cQ.loadUsaQuiz();
      }
    },
    createAnswerKey: function() {
      var newBaseKey, state, _i, _len;
      newBaseKey = this.shuffle(statesAnswerKey);
      for (_i = 0, _len = newBaseKey.length; _i < _len; _i++) {
        state = newBaseKey[_i];
        state.cities = this.shuffle(state.cities);
        state.cities = state.cities.splice(2, 2);
        state.cities.push(state.capital);
        state.cities = this.shuffle(state.cities);
        state.letter = statesLetterKey[state.abbr];
      }
      this.answerKey = newBaseKey;
      return this.totalQuestions = this.answerKey.length;
    },
    loadUsaQuiz: function() {
      var html, qC;
      qC = this.$quizForm.detach();
      $('.container').empty().append(qC);
      html = cQ.createQuestionSet();
      this.$quizForm.on('submit', this.processForm);
      return this.$quizForm.find('div').html(html).end().show();
    },
    createQuestionSet: function() {
      var set;
      set = {
        states: this.answerKey.slice(this.numberAnswered, this.numberAnswered + this.qSetLength),
        answered: this.numberAnswered,
        total: this.totalQuestions,
        percentage: "" + (String(Math.round(this.numberAnswered / this.totalQuestions * 100))) + "%"
      };
      return this.quizFormTemplate(set);
    },
    processForm: function(e) {
      var data, item, _i, _len;
      e.preventDefault();
      data = $(this).serializeArray();
      cQ.validateForm(data);
      if (!cQ.invalidForm) {
        for (_i = 0, _len = data.length; _i < _len; _i++) {
          item = data[_i];
          cQ.userAnswers.push(item);
        }
        cQ.numberAnswered += cQ.qSetLength;
        if (cQ.numberAnswered >= cQ.totalQuestions) {
          return cQ.showResults();
        } else {
          return cQ.showNextSet();
        }
      }
    },
    validateForm: function(arr) {
      var errorMsg, item, _i, _len;
      this.invalidForm = false;
      errorMsg = "<div class='question__no-answer'>      <p>Please select a capital for this state.</p>      </div>";
      $(".question__no-answer").remove();
      for (_i = 0, _len = arr.length; _i < _len; _i++) {
        item = arr[_i];
        if (!item.value) {
          $(".question--" + item.name).prepend(errorMsg);
          this.invalidForm = true;
        }
      }
    },
    showNextSet: function() {
      var html;
      html = this.createQuestionSet();
      this.$quizForm.find('div').html(html);
      if (cQ.numberAnswered >= (cQ.totalQuestions - cQ.qSetLength)) {
        return this.$quizForm.find('input[type=submit]').val('View Results \u27A1');
      }
    },
    showResults: function() {
      var answer, html, results, state, _i, _j, _len, _len1, _ref, _ref1;
      results = {
        total: this.totalQuestions,
        wrong: []
      };
      _ref = this.userAnswers;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        answer = _ref[_i];
        _ref1 = this.answerKey;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          state = _ref1[_j];
          if (answer.name === state.abbr) {
            if (answer.value !== state.capital) {
              results.wrong.push(state);
              break;
            }
          }
        }
      }
      results.correct = results.total - results.wrong.length;
      results.score = "" + (String(Math.round(results.correct / results.total * 100))) + "%";
      html = this.resultsTemplate(results);
      this.$quizForm.find('div').empty().end().remove();
      $('.container').html(html);
      /*
      		TODO - NOT THE BEST WAY TO DO THIS
      */

      return $('.btn--new-game').on('click', function() {
        return location.reload();
      });
    },
    shuffle: function(arr) {
      var i, j, tempi, tempj;
      i = arr.length;
      if (i === 0) {
        return false;
      }
      while (--i) {
        j = Math.floor(Math.random() * (i + 1));
        tempi = arr[i];
        tempj = arr[j];
        arr[i] = tempj;
        arr[j] = tempi;
      }
      return arr;
    }
  };

  cQ.init();

}).call(this);
